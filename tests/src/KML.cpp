#include <stdlib.h>
#include <avs/KMLDocument.hpp>

#include "Assert.hpp"

using namespace KML;

int main()
{
    const unsigned char source[] =
    {
        0xa0, 0x42, 0x80, 0x7f, 0x00, 0x00, 0x02, 0x34, 0x01, 0x04, 0xe6, 0xae,
        0x39, 0x4c, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0b, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0x2e, 0x04, 0x9b, 0x9e, 0x77, 0x2e, 0x05, 0x9b, 0x9e, 0x77,
        0x08, 0xfe, 0x0b, 0x09, 0xe3, 0xad, 0x6a, 0xdf, 0x8e, 0x66, 0xdc, 0x2e,
        0x04, 0x9e, 0x69, 0xea, 0xfe, 0x1b, 0x0e, 0xf6, 0x2f, 0x65, 0x78, 0x44,
        0x51, 0x0d, 0xc9, 0x7d, 0x8b, 0xd0, 0xfe, 0x03, 0x07, 0x9b, 0x1b, 0xac,
        0xce, 0xaa, 0x40, 0xfe, 0x0a, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0a,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x5b, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x01, 0x0a, 0xcf, 0x49, 0x6b, 0xde, 0xea, 0xb3, 0xa7, 0x80, 0xfe,
        0x01, 0x10, 0xaf, 0x4d, 0x29, 0x96, 0xbd, 0x37, 0x97, 0x9b, 0x74, 0xea,
        0xcb, 0x79, 0x2e, 0x05, 0x9f, 0x7a, 0xa6, 0xa4, 0xfe, 0x02, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x03, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x04,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x05, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x06, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x07, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0xfe, 0x08, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x09, 0x05,
        0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0a, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe,
        0x0a, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0b, 0x05, 0xab, 0x3e, 0x77,
        0xf8, 0xfe, 0x0b, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0c, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x0e, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0e,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x0f, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x0f, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x10, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0xfe, 0x51, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x12, 0x05,
        0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x13, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe,
        0x14, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x15, 0x05, 0xab, 0x3e, 0x77,
        0xf8, 0xfe, 0x16, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x16, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x17, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x17,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x18, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x19, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x19, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0xfe, 0x1a, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x1b, 0x05,
        0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x1c, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe,
        0x1d, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x1e, 0x05, 0xab, 0x3e, 0x77,
        0xf8, 0xfe, 0x1f, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x20, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x21, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x22,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x23, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x24, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x25, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0xfe, 0x26, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x27, 0x05,
        0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x28, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe,
        0x28, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x29, 0x05, 0xab, 0x3e, 0x77,
        0xf8, 0xfe, 0x29, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x2a, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x2b, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x2c,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x2c, 0x05, 0xab, 0x3e, 0x77, 0xf8,
        0xfe, 0x2d, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x30, 0x05, 0xab, 0x3e,
        0x77, 0xf8, 0xfe, 0x31, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x32, 0x05,
        0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x33, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe,
        0x34, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x34, 0x05, 0xab, 0x3e, 0x77,
        0xf8, 0xfe, 0x35, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x36, 0x05, 0xab,
        0x3e, 0x77, 0xf8, 0xfe, 0x37, 0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0x38,
        0x05, 0xab, 0x3e, 0x77, 0xf8, 0xfe, 0xfe, 0xff, 0x00, 0x00, 0x03, 0x40,
        0x00, 0x00, 0x00, 0x08, 0x7f, 0x00, 0x00, 0x01, 0xc0, 0xa8, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x0e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77,
        0x6f, 0x72, 0x6c, 0x64, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
        0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
        0x62, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
        0x83, 0x56, 0x81, 0x40, 0x83, 0x43, 0x83, 0x58, 0x81, 0x40, 0x83, 0x7d,
        0x83, 0x43, 0x81, 0x40, 0x83, 0x8f, 0x83, 0x43, 0x83, 0x74, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x07, 0x83, 0x7e, 0x83, 0x63, 0x83, 0x8b, 0x00, 0x00,
        0x08, 0x09, 0x0a, 0x00, 0x0c, 0x7b, 0x7b, 0x01, 0x00, 0x00, 0x00, 0x04,
        0xde, 0xad, 0xbe, 0xef, 0x00, 0x00, 0x00, 0x04, 0xde, 0xad, 0xbe, 0x7a,
        0x00, 0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x01, 0x02, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x06, 0x74, 0x61, 0x73, 0x74, 0x79, 0x00, 0x00, 0x00,
        0x00, 0x7b, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7b,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x04, 0xf0, 0x0d, 0x13, 0x37,
        0x00, 0x00, 0x00, 0x04, 0xde, 0xad, 0xbe, 0xef, 0x00, 0x00, 0x00, 0x0e,
        0x54, 0x45, 0x53, 0x54, 0x20, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x20,
        0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x54, 0x45, 0x53, 0x54,
        0x20, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x00, 0xc0, 0xa8, 0x00, 0x01,
        0x42, 0xf6, 0x33, 0x33, 0x42, 0xf6, 0x33, 0x33, 0x40, 0x5e, 0xc6, 0x66,
        0x66, 0x66, 0x66, 0x66, 0x40, 0x5e, 0xc6, 0x66, 0x66, 0x66, 0x66, 0x66,
        0x7f, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0xe8, 0x0c, 0x0d, 0x0e,
        0x04, 0xd0, 0xea, 0xc7, 0x01, 0x59, 0x0d, 0x7f, 0x00, 0x01, 0xe0, 0xf3,
        0xff, 0xff, 0xce, 0x80, 0x00, 0x00, 0x14, 0xe1, 0x00, 0x01, 0x2b, 0x1f,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x37, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xe9, 0xc9, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9b, 0x8f, 0xb7,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x79, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x41, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x79,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x70, 0x49, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xcc, 0x79, 0xc2, 0x00, 0x00, 0x00, 0x41, 0x40, 0x00, 0x00,
        0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x28, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7f, 0x84, 0x00,
        0x02, 0x04, 0xff, 0x00, 0x0b, 0x1a, 0x30, 0x8b, 0xc8, 0x70, 0x00, 0x00,
        0x00, 0xf2, 0x01, 0xa8, 0x5e, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc8,
        0x00, 0x02, 0xae, 0x0b, 0xff, 0xff, 0xd0, 0x2c, 0x00, 0x00, 0x5f, 0x66,
        0x00, 0x00, 0xac, 0xd2, 0x00, 0x00, 0x62, 0x9d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0b, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xaf,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0xc2, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x70, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xc8,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x8b, 0xc2, 0x00, 0x00, 0x00,
        0x41, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x7f, 0x84,
        0x01, 0x02, 0xff, 0xff, 0xff, 0xde, 0xff, 0xcb, 0xff, 0xe9, 0x00, 0x22,
        0x00, 0x7b, 0x00, 0x7b, 0x00, 0x9a, 0x02, 0x8e, 0x00, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x02, 0x90, 0xff, 0xff, 0xee, 0x2b,
        0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x84, 0xff, 0xff, 0xfd, 0x70,
        0x00, 0x00, 0x11, 0xd5, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x84,
        0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x11, 0xd5, 0x00, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x11, 0xd5,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x4e, 0x42, 0x25, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1e, 0xaa,
        0x00, 0x00, 0x00, 0x00, 0x07, 0xb6, 0x33, 0x6f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x79, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x42, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x50, 0xea, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xb6, 0x33, 0x6f, 0xc2, 0x00, 0x00, 0x00, 0x41, 0x40, 0x00, 0x00,
        0x40, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x00, 0x00,
        0x42, 0x50, 0x00, 0x00, 0xc1, 0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
        0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x05, 0x07,
        0x0c, 0x10, 0x2e, 0x4c, 0x5d, 0x7b, 0x00, 0x84, 0x85, 0xf4, 0xd6, 0xc8,
        0x01, 0x03, 0x05, 0x07, 0x0c, 0x10, 0x2e, 0x4c, 0x5d, 0x7b, 0xb2, 0xf0,
        0xff, 0x7f, 0x7e, 0xff, 0x00, 0x5d, 0x00, 0x7b, 0x00, 0x00, 0xff, 0x84,
        0xff, 0x85, 0xff, 0xf4, 0xff, 0xd6, 0xff, 0xc8, 0x00, 0x10, 0x00, 0x2e,
        0x00, 0x4c, 0x00, 0x5d, 0x00, 0x7b, 0x00, 0xb2, 0x00, 0xf0, 0x00, 0xff,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    };

    Document *document = new Document(source);
    Node *root = document->GetRoot()->GetNode("test");
    std::vector<Node *> entry_nodes = root->GetNodes("entry");

    // number of entry nodes
    Assert::Equals("<entry> node count", entry_nodes.size(), (size_t)68);

    // ip4 array
    Assert::NodeArrayEquals("ip4 array", entry_nodes[0], std::array<unsigned char, 8>({ 0x7f, 0x00, 0x00, 0x01, 0xc0, 0xa8, 0x00, 0x01 }));

    // attributes and text
    NodeString hello_world = (NodeString)entry_nodes[1];
    Assert::NodeAttributeEquals("Attribute 1", hello_world, "attr", "test");
    Assert::NodeAttributeEquals("Attribute 2", hello_world, "attr2", "best");
    Assert::NodeValueEquals("String value", hello_world, std::string("Hello, world!"));

    // text encoding
    NodeString encoding = (NodeString)root->GetNode("superstar");
    Assert::NodeAttributeEquals("Attribute encoding", encoding, "babe", "ミツル");
    Assert::NodeValueEquals("Value encoding", encoding, std::string("シ　イス　マイ　ワイフ"));

    // 6bit conversion
    Assert::NodeArrayEquals("6bit conversion", root->GetNode("xXx_T4GG3R_xXx"), std::array<uint8_t, 3>({ 8, 9, 10 }));

    // alignment
    Assert::NodeValueEquals("Alignment", root->GetNode("aligned"), (uint8_t)12);

    // binary
    Assert::NodeArrayEquals("Binary 1", entry_nodes[2], std::array<unsigned char, 4>({ 0xde, 0xad, 0xbe, 0xef }));
    Assert::NodeArrayEquals("Binary 2", entry_nodes[3], std::array<unsigned char, 4>({ 0xde, 0xad, 0xbe, 0x7a }));

    // 2d array
    Assert::NodeArrayEquals("2D array", entry_nodes[4], std::array<uint8_t, 6>({ 1, 2, 3, 1, 2, 3 }));

    // node with no value
    Assert::Equals("Node with no value", root->GetNode("no_friends") != nullptr, true);

    // node with attribute but no value
    Assert::NodeAttributeEquals("Node with attribute but no value", root->GetNode("food_for_thought"), "bread", "tasty");

    // all data types
    // 1x values
    Assert::NodeValueEquals("s8", entry_nodes[5], (int8_t)123);
    Assert::NodeValueEquals("u8", entry_nodes[6], (uint8_t)123);
    Assert::NodeValueEquals("s16", entry_nodes[7], (int16_t)123);
    Assert::NodeValueEquals("u16", entry_nodes[8], (uint16_t)123);
    Assert::NodeValueEquals("s32", entry_nodes[9], (int32_t)123);
    Assert::NodeValueEquals("u32", entry_nodes[10], (uint32_t)123);
    Assert::NodeValueEquals("s64", entry_nodes[11], (int64_t)123);
    Assert::NodeValueEquals("u64", entry_nodes[12], (uint64_t)123);
    Assert::NodeArrayEquals("bin", entry_nodes[13], std::array<unsigned char, 4>({ 0xf0, 0x0d, 0x13, 0x37 }));
    Assert::NodeArrayEquals("binary", entry_nodes[14], std::array<unsigned char, 4>({ 0xde, 0xad, 0xbe, 0xef }));
    Assert::NodeValueEquals("string", entry_nodes[15], std::string("TEST STRING 2"));
    Assert::NodeValueEquals("str", entry_nodes[16], std::string("TEST STRING"));
    Assert::NodeArrayEquals("ip4", entry_nodes[17], std::array<unsigned char, 4>({ 0xc0, 0xa8, 0x00, 0x01 }));
    Assert::NodeValueEquals("float", entry_nodes[18], 123.100f);
    Assert::NodeValueEquals("f", entry_nodes[19], 123.100f);
    Assert::NodeValueEquals("d", entry_nodes[20], 123.100);
    Assert::NodeValueEquals("double", entry_nodes[21], 123.100);

    // 2x values
    Assert::NodeArrayEquals("2s8", entry_nodes[22], std::array<int8_t, 2>({ 127, -23 }));
    Assert::NodeArrayEquals("2u8 x2", entry_nodes[23], std::array<uint8_t, 4>({ 232, 12, 13, 14 }));
    Assert::NodeArrayEquals("2s16", entry_nodes[24], std::array<int16_t, 2>({ 1232, -5433 }));
    Assert::NodeArrayEquals("2u16", entry_nodes[25], std::array<uint16_t, 2>({ 345, 3455 }));
    Assert::NodeArrayEquals("2s32", entry_nodes[26], std::array<int32_t, 2>({ 123123, -12672 }));
    Assert::NodeArrayEquals("2u32", entry_nodes[27], std::array<uint32_t, 2>({ 5345, 76575 }));
    Assert::NodeArrayEquals("vs64", entry_nodes[28], std::array<int64_t, 2>({ 5687, -5687 }));
    Assert::NodeArrayEquals("2s64", entry_nodes[29], std::array<int64_t, 2>({ -6582345, 52345 }));
    Assert::NodeArrayEquals("vu64", entry_nodes[30], std::array<uint64_t, 2>({ 82345, 52345 }));
    Assert::NodeArrayEquals("2u64", entry_nodes[31], std::array<uint64_t, 2>({ 6582345, 52345 }));
    Assert::NodeArrayEquals("2f", entry_nodes[32], std::array<float, 2>({ -32.000f, 12.000f }));
    Assert::NodeArrayEquals("vd", entry_nodes[33], std::array<double, 2>({ -32.000, 12.000 }));
    Assert::NodeArrayEquals("2d", entry_nodes[34], std::array<double, 2>({ -32.000, 12.000 }));

    // 3x values
    Assert::NodeArrayEquals("3s8", entry_nodes[35], std::array<int8_t, 3>({ 28, 127, -124 }));
    Assert::NodeArrayEquals("3u8", entry_nodes[36], std::array<uint8_t, 3>({ 2, 4, 255 }));
    Assert::NodeArrayEquals("3s16", entry_nodes[37], std::array<int16_t, 3>({ 2842, 12427, -14224 }));
    Assert::NodeArrayEquals("3u16", entry_nodes[38], std::array<uint16_t, 3>({ 242, 424, 24255 }));
    Assert::NodeArrayEquals("3s32", entry_nodes[39], std::array<int32_t, 3>({ 2248, 175627, -12244 }));
    Assert::NodeArrayEquals("3u32", entry_nodes[40], std::array<uint32_t, 3>({ 24422, 44242, 25245 }));
    Assert::NodeArrayEquals("3s64", entry_nodes[41], std::array<int64_t, 3>({ 2898, 10927, -12094 }));
    Assert::NodeArrayEquals("3u64", entry_nodes[42], std::array<uint64_t, 3>({ 28908, 8904, 2955 }));
    Assert::NodeArrayEquals("3f", entry_nodes[43], std::array<float, 3>({ -32.000f, 12.000f, 3.00f }));
    Assert::NodeArrayEquals("3d", entry_nodes[44], std::array<double, 3>({ -32.000, 12.000, 3.000 }));

    // 4x values
    Assert::NodeArrayEquals("4s8", entry_nodes[45], std::array<int8_t, 4>({ 24, 28, 127, -124 }));
    Assert::NodeArrayEquals("4u8", entry_nodes[46], std::array<uint8_t, 4>({ 1, 2, 255, 255 }));
    Assert::NodeArrayEquals("4s16", entry_nodes[47], std::array<int16_t, 4>({ -34, -53, -23, 34 }));
    Assert::NodeArrayEquals("4u16", entry_nodes[48], std::array<uint16_t, 4>({ 123, 123, 154, 654 }));
    Assert::NodeArrayEquals("4s32", entry_nodes[49], std::array<int32_t, 4>({ 12, 132, 656, -4565 }));
    Assert::NodeArrayEquals("vs32", entry_nodes[50], std::array<int32_t, 4>({ 12, 132, -656, 4565 }));
    Assert::NodeArrayEquals("vu32", entry_nodes[51], std::array<uint32_t, 4>({ 12, 132, 656, 4565 }));
    Assert::NodeArrayEquals("4u32", entry_nodes[52], std::array<uint32_t, 4>({ 12, 132, 656, 4565 }));
    Assert::NodeArrayEquals("4s64", entry_nodes[53], std::array<int64_t, 4>({ -31231, 5128741, -123222, 129381231 }));
    Assert::NodeArrayEquals("4u64", entry_nodes[54], std::array<uint64_t, 4>({ 31231, 5128741, 1280371203, 129381231 }));
    Assert::NodeArrayEquals("vf", entry_nodes[55], std::array<float, 4>({ -32.000f, 12.000f, 3.000f, 2.000f }));
    Assert::NodeArrayEquals("4f", entry_nodes[56], std::array<float, 4>({ 5.000f, 52.000f, -12.000f, 32.000f }));
    Assert::NodeArrayEquals("4d", entry_nodes[57], std::array<double, 4>({ 1.000, 3.000, 4.000, -1.000 }));

    // 16x values
    Assert::NodeArrayEquals("vs8", entry_nodes[58], std::array<int8_t, 16>({ 1, 3, 5, 7, 12, 16, 46, 76, 93, 123, 0, -124, -123, -12, -42, -56 }));
    Assert::NodeArrayEquals("vu8", entry_nodes[59], std::array<uint8_t, 16>({ 1, 3, 5, 7, 12, 16, 46, 76, 93, 123, 178, 240, 255, 127, 126, 255 }));

    // 8x values
    Assert::NodeArrayEquals("vs16", entry_nodes[60], std::array<int16_t, 8>({ 93, 123, 0, -124, -123, -12, -42, -56 }));
    Assert::NodeArrayEquals("vu16", entry_nodes[61], std::array<uint16_t, 8>({ 16, 46, 76, 93, 123, 178, 240, 255 }));

    // bools
    Assert::NodeValueEquals("bool", entry_nodes[62], true);
    Assert::NodeValueEquals("b", entry_nodes[63], true);
    Assert::NodeArrayEquals("2b", entry_nodes[64], std::array<bool, 2>({ false, true }));
    Assert::NodeArrayEquals("3b", entry_nodes[65], std::array<bool, 3>({ true, false, true }));
    Assert::NodeArrayEquals("4b", entry_nodes[66], std::array<bool, 4>({ true, true, true, false }));
    Assert::NodeArrayEquals("vb", entry_nodes[67], std::array<bool, 16>({ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }));

    delete document;
    return EXIT_SUCCESS;
}
